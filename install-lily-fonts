#!/usr/bin/env python

# -*- coding:utf-8 -*-

from __future__ import unicode_literals

import os
import sys
import shutil
import zipfile

from util.config import Config
from util.fonts import Fonts
from util import error


class LilyPond(object):
    """Represents a given LilyPond installation directory"""

    def install_font(self, f_rec):
        """Installs the given font to the current LilyPond installation."""

        def clear_directory(type, font_filename):
            """Remove existing links to a font in a dir to prevent inconsistencies"""
            target_dir = os.path.join(self.font_dir, type)
            for ln in os.listdir(target_dir):
                abs_ln = os.path.join(target_dir, ln)
                if os.path.islink(abs_ln) and ln.startswith(font_filename):
                    os.unlink(abs_ln)


        def install_directory(ext, font_filename):
            """Create all the links for one font name"""
            pass


        font_filename = f_rec['dirname']
        font_root = f_rec['font_root']
        clear_directory('otf', font_filename)
        clear_directory('svg', font_filename)
        install_directory()


#    for dirName, subdirList, fileList in os.walk(font_dir):
#        print "Processing dir:", dirName
#        for f in fileList:
#            link_name = ''
#            name, ext = os.path.splitext(f)
#            if ext == '.otf':
#                link_name = os.path.join(otf_dir, f)
#            if ext == '.svg' or ext == '.woff':
#                link_name = os.path.join(svg_dir, f)
#            if link_name:
#                link_target = os.path.join(dirName, f)
#                try:
#                    os.symlink(link_target, link_name)
#                except OSError, e:
#                    print "Could not install font:", link_target
#                    print str(e)
#                print 'Installed:', link_name





class Catalog(object):
    def __init__(self):

        # maintain a sorted list of all font names
        self.__font_list = []

        self.__check_font_catalogs()

    def __check_remote_fonts(self):

        print "Parsing remote font catalog ..."
        result = self.__read_catalog_file(lines)
        print "Successfully updated font catalog:"
        print "  Found {} fonts.".format(len(result))
        return result

    def __check_font_catalogs(self):
        self.__local_fonts = self.__check_local_fonts()
        self.__remote_fonts = self.__check_remote_fonts()


    def font_dir(self):
        return self.__font_dir

    def local_fonts(self):
        return self.__local_fonts

    def remote_fonts(self):
        return self.__remote_fonts




def main():
    Config.read_args()
    fonts = Fonts()
    fonts.handle_fonts()

    sys.exit(0)

    ##################
    conf = Catalog()
    font_matrix = Fonts(conf)
    font_matrix.download_fonts()
    font_matrix.extract_fonts()
    font_matrix.install_fonts()


# ####################################
# Finally launch the program
if __name__ == "__main__":
    main()
